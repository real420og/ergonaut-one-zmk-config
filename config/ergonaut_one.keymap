#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        vimCopyBuff: vimCopyBuff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp PLUS &kp Y>;
            label = "VIMCOPYBUFF";
        };

        minus_greater_than: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "NEW_MACRO";
        };

        alt_alt_without_releasing: new_macro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LEFT_ALT>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NEW_MACRO2";
        };

        shift_shift: shift_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
            label = "SHIFT_SHIFT";
        };

        exclamatory_and_equal: exclamatory_and_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
            label = "EXCLAMATORY_AND_EQUAL";
        };

        less_than_minus: minus_less_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS>;
            label = "minus_less_than";
        };

        equal_arrow: equal_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "EQUAL_ARROW";
        };

        equals_colon: equals_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "EQUALS_COLON";
        };

        less_greater: less_greater {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT_ARROW>;
            label = "LESS_GREATER";
        };

        less_equal: less_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_EQUAL";
        };

        greater_equal: greater_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GREATER_EQUAL";
        };

        colon_double: colon_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "COLON_DOUBLE";
        };

        pipe_double: pipe_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE &kp LEFT_ARROW>;
            label = "PIPE_DOUBLE";
        };

        curly_brackets_double: curly_brackets_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT_ARROW>;
            label = "CURLY_BRACKETS_DOUBLE";
        };
    };

    behaviors {
        vimCopyBuffHold: vimCopyBuffHold {
            compatible = "zmk,behavior-hold-tap";
            label = "VIMCOPYBUFFHOLD";
            bindings = <&mo>, <&vimCopyBuff>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 24 25 26 17 29 0 1 2 3 4 5 27 28 36 37 38 4 5 16 17 28 29 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
            hold-while-undecided;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 6 7 8 9 10 11 35 34 33 32 31 19 18 40 39 41 30>;
        };

        mt_hold_prefer_release: mt_hold_prefer_release {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_PREFER_RELEASE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 29 30 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        lt_hold_prefer_release: lt_hold_prefer_release {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_PREFER_RELEASE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };

        layer7_a: layer7_a {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER7_A";
            bindings = <&alt_alt_without_releasing>, <&minus_greater_than>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        layer7_f: layer7_f {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER7_F";
            bindings = <&shift_shift>, <&exclamatory_and_equal>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        brackets: brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACKETS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            hold-trigger-on-release;
            flavor = "balanced";
            hold-while-undecided;
        };

        mt2: mt2 {
            compatible = "zmk,behavior-hold-tap";
            label = "MT2";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q            &kp W         &kp E                          &kp R                            &kp T                             &kp Y                            &kp U               &kp I                 &kp O         &kp P                     &sl 5
&kp BACKSPACE  &hml LEFT_ALT A  &hml LCTRL S  &hml LEFT_COMMAND D            &hml LEFT_SHIFT F                &kp G                             &kp H                            &hml RIGHT_SHIFT J  &hml RIGHT_COMMAND K  &hml RCTRL L  &hml RIGHT_ALT SEMICOLON  &kp SQT
&none          &kp Z            &kp X         &kp C                          &kp V                            &kp B                             &kp N                            &kp M               &kp COMMA             &kp DOT       &kp FSLH                  &kp ENTER
                                              &lt_hold_prefer_release 4 F16  &lt_hold_prefer_release 3 GRAVE  &lt_hold_prefer_release 2 ESCAPE  &lt_hold_prefer_release 2 SPACE  &kp LBKT            &kp RBKT
            >;
        };

        adjust {
            bindings = <
&bootloader  &sys_reset    &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&none        &none         &none         &none         &none         &none         &kp Z         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };

        arrows {
            bindings = <
&none   &none   &none   &none              &none            &none       &kp LA(BSLH)       &kp LA(R)                   &kp LA(L)                    &kp LA(S)        &kp LA(LEFT_ARROW)    &kp LA(RIGHT_ARROW)
&kp F1  &kp F2  &kp F3  &kp F4             &kp F5           &kp F6      &kp LEFT_ARROW     &kp DOWN_ARROW              &kp UP_ARROW                 &kp RIGHT_ARROW  &kp LA(LS(NUMBER_1))  &kp LC(SPACE)
&kp F7  &kp F8  &kp F9  &kp F10            &kp F11          &kp F12     &kp LS(LC(EQUAL))  &kp LC(MINUS)               &kp LS(LC(MINUS))            &none            &none                 &kp LS(LG(P))
                        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &trans             &kp LA(LC(LG(LEFT_ARROW)))  &kp LA(LC(LG(RIGHT_ARROW)))
            >;
        };

        numbers {
            bindings = <
&none  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
&none  &trans  &trans  &trans  &trans  &none   &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none
&none  &none   &none   &none   &none   &none   &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
                       &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        signs {
            bindings = <
&none                &less_greater     &less_equal             &greater_equal  &colon_double  &none         &kp MINUS               &kp PLUS        &kp EQUAL        &kp UNDERSCORE        &kp PIPE               &kp BACKSLASH
&minus_greater_than  &less_than_minus  &exclamatory_and_equal  &equal_arrow    &equals_colon  &pipe_double  &kp EXCLAMATION         &kp AT_SIGN     &kp POUND        &kp DOLLAR            &kp PERCENT            &kp DOUBLE_QUOTES
&none                &none             &none                   &none           &none          &none         &kp CARET               &kp AMPERSAND   &kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON
                                                               &trans          &none          &mo 1         &curly_brackets_double  &kp LEFT_BRACE  &kp RIGHT_BRACE
            >;
        };

        layer_5 {
            bindings = <
&none  &none              &none                     &none               &none  &none                     &none  &none  &none  &none  &none  &kp LG(TAB)
&none  &kp LG(LS(LA(A)))  &kp LG(LA(LS(P)))         &kp LG(LA(LS(D)))   &none  &kp LG(LA(LS(G)))         &none  &none  &none  &none  &none  &none
&none  &kp LG(LA(LS(Z)))  &kp LS(LA(LG(NUMBER_2)))  &kp LG(LA(LS(N1)))  &none  &kp LG(LA(LS(NUMBER_3)))  &none  &none  &none  &none  &none  &none
                                                    &none               &none  &none                     &none  &none  &none
            >;
        };
    };
};
