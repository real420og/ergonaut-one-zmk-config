#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        vimCopyBuff: vimCopyBuff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp PLUS &kp Y>;
            label = "VIMCOPYBUFF";
        };

        minus_greater_than: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "NEW_MACRO";
        };

        alt_alt_without_releasing: new_macro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LEFT_ALT>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "NEW_MACRO2";
        };

        shift_shift: shift_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
            label = "SHIFT_SHIFT";
        };

        exclamatory_and_equal: exclamatory_and_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
            label = "EXCLAMATORY_AND_EQUAL";
        };

        less_than_minus: minus_less_than {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS>;
            label = "minus_less_than";
        };

        equal_arrow: equal_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "EQUAL_ARROW";
        };

        equals_colon: equals_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "EQUALS_COLON";
        };

        less_greater: less_greater {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT_ARROW>;
            label = "LESS_GREATER";
        };

        less_equal: less_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_EQUAL";
        };

        greater_equal: greater_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GREATER_EQUAL";
        };

        colon_double: colon_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "COLON_DOUBLE";
        };

        pipe_double: pipe_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE &kp LEFT_ARROW>;
            label = "PIPE_DOUBLE";
        };

        curly_brackets_double: curly_brackets_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT_ARROW>;
            label = "CURLY_BRACKETS_DOUBLE";
        };

        vimput: vimput {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp N0 &kp P>;
            label = "VIMPUT";
        };

        vim_ctrl_caret: vim_ctrl_caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(CARET)>,
                <&macro_press>,
                <&macro_pause_for_release>,
                <&macro_release>;

            label = "VIM_CTRL_CARET";
        };

        mQ: mQ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(Q)>;
            label = "MQ";
        };

        graveQ: graveQ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(Q)>;
            label = "GRAVEQ";
        };

        mW: mW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(W)>;
            label = "MW";
        };

        graveW: graveW {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(W)>;
            label = "GRAVEW";
        };

        mE: mE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(E)>;
            label = "ME";
        };

        graveE: graveE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(E)>;
            label = "GRAVEE";
        };

        mR: mR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(R)>;
            label = "MR";
        };

        graveR: graveR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(R)>;
            label = "GRAVER";
        };

        mT: mT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(T)>;
            label = "MT";
        };

        graveT: graveT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(T)>;
            label = "GRAVET";
        };

        mA: mA {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(A)>;
            label = "MA";
        };

        graveA: graveA {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(A)>;
            label = "GRAVEA";
        };

        mS: mS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(S)>;
            label = "MS";
        };

        graveS: graveS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(S)>;
            label = "GRAVES";
        };

        mD: mD {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(D)>;
            label = "MD";
        };

        graveD: graveD {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(D)>;
            label = "GRAVED";
        };

        mF: mF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(F)>;
            label = "MF";
        };

        graveF: graveF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(F)>;
            label = "GRAVEF";
        };

        mG: mG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp LS(G)>;
            label = "MG";
        };

        graveG: graveG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(G)>;
            label = "GRAVEG";
        };
    };

    behaviors {
        vimCopyBuffHold: vimCopyBuffHold {
            compatible = "zmk,behavior-hold-tap";
            label = "VIMCOPYBUFFHOLD";
            bindings = <&mo>, <&vimCopyBuff>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 24 25 26 17 29 0 1 2 3 4 5 27 28 36 37 38 4 5 16 17 28 29 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
            hold-while-undecided;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 6 7 8 9 10 11 35 34 33 32 31 19 18 40 39 41 30>;
        };

        mt_hold_prefer_release: mt_hold_prefer_release {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_PREFER_RELEASE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 29 30 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        lt_hold_prefer_release: lt_hold_prefer_release {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_PREFER_RELEASE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };

        layer7_a: layer7_a {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER7_A";
            bindings = <&alt_alt_without_releasing>, <&minus_greater_than>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        layer7_f: layer7_f {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER7_F";
            bindings = <&shift_shift>, <&exclamatory_and_equal>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        brackets: brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACKETS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            hold-trigger-on-release;
            flavor = "balanced";
            hold-while-undecided;
        };

        mt2: mt2 {
            compatible = "zmk,behavior-hold-tap";
            label = "MT2";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };

        lt_tap_prefer_release: lt_tap_prefer_release {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_TAP_PREFER_RELEASE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        kp_and_vim_ctrl_caret: kp_and_vim_ctrl_caret {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_AND_VIM_CTRL_CARET";
            bindings = <&vim_ctrl_caret>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_hold_prefer_release2: lt_hold_prefer_release2 {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_PREFER_RELEASE2";
            bindings = <&mo>, <&sl1000>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
        };

        sl1000: sl1000 {
            compatible = "zmk,behavior-sticky-key";
            label = "SL1000";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ctrl+space {
            bindings = <&hml LG(RCTRL) LC(SPACE)>;
            key-positions = <20 21>;
            layers = <0>;
            timeout-ms = <200>;
        };

        yank {
            bindings = <&vimCopyBuff>;
            key-positions = <4 5>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        vim_put {
            bindings = <&vimput>;
            key-positions = <6 7>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        switch_lang {
            bindings = <&kp F16>;
            key-positions = <16 17>;
            layers = <0>;
            require-prior-idle-ms = <200>;
            timeout-ms = <50>;
        };

        escape {
            bindings = <&mt LG(LEFT_SHIFT) ESCAPE>;
            key-positions = <15 16>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        colon {
            bindings = <&kp LS(SEMICOLON)>;
            key-positions = <16 22>;
            layers = <0>;
            timeout-ms = <100>;
        };

        quote {
            bindings = <&kp LS(SINGLE_QUOTE)>;
            key-positions = <16 23>;
            timeout-ms = <100>;
            layers = <0>;
        };

        questing {
            bindings = <&kp LS(SLASH)>;
            key-positions = <16 35>;
            timeout-ms = <100>;
            layers = <0>;
        };

        left_brace {
            bindings = <&kp LS(LEFT_BRACKET)>;
            key-positions = <16 40>;
            timeout-ms = <100>;
            layers = <0>;
        };

        right_brace {
            bindings = <&kp LS(RIGHT_BRACKET)>;
            key-positions = <16 41>;
            timeout-ms = <100>;
            layers = <0>;
        };

        left_arrow {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <39 18>;
            layers = <0>;
        };

        down_arrow {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <39 19>;
            layers = <0>;
        };

        up_arrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <39 20>;
            layers = <0>;
        };

        right_arrow {
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <39 21>;
            layers = <0>;
            require-prior-idle-ms = <300>;
        };

        escape3 {
            bindings = <&mt LG(LEFT_SHIFT) ESCAPE>;
            key-positions = <19 20>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        switch_lang2 {
            bindings = <&kp F16>;
            key-positions = <18 19>;
            layers = <0>;
            require-prior-idle-ms = <200>;
        };

        ctrl_o {
            bindings = <&kp LC(O)>;
            key-positions = <21 9>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        tab {
            bindings = <&mt LC(LEFT_GUI) TAB>;
            key-positions = <15 14>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        enter {
            bindings = <&kp LG(ENTER)>;
            key-positions = <33 34>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB        &kp Q            &kp W         &kp E                            &kp R                         &kp_and_vim_ctrl_caret 0 T    &kp Y                           &kp U                       &kp I                 &kp O         &kp P                     &sl 5
&kp BACKSPACE  &hml LEFT_ALT A  &hml LCTRL S  &hml LEFT_COMMAND D              &hml LEFT_SHIFT F             &kp G                         &kp H                           &hml RIGHT_SHIFT J          &hml RIGHT_COMMAND K  &hml RCTRL L  &hml RIGHT_ALT SEMICOLON  &kp SQT
&kp F16        &kp Z            &kp X         &kp C                            &kp V                         &kp B                         &kp N                           &lt_tap_prefer_release 7 M  &kp COMMA             &kp DOT       &kp SLASH                 &kp SLASH
                                              &lt_hold_prefer_release 6 GRAVE  &lt_hold_prefer_release2 4 4  &lt_hold_prefer_release2 3 3  &lt_tap_prefer_release 2 SPACE  &kp LBKT                    &kp RBKT
            >;
        };

        adjust {
            bindings = <
&bootloader  &sys_reset    &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&none        &none         &none         &none         &none         &none         &kp Z         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };

        arrows {
            bindings = <
&kp F1                &kp F2  &kp F3  &kp F4             &kp F5           &kp F6      &kp LA(BSLH)       &kp LA(R)       &kp LA(L)          &kp LA(S)                   &kp LA(LEFT_ARROW)           &kp LA(RIGHT_ARROW)
&kp F7                &kp F8  &kp F9  &kp F10            &kp F11          &kp F12     &kp LEFT_ARROW     &kp DOWN_ARROW  &kp UP_ARROW       &kp RIGHT_ARROW             &none                        &none
&kp LS(LA(NUMBER_1))  &none   &none   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &kp LS(LC(EQUAL))  &kp LC(MINUS)   &kp LS(LC(MINUS))  &kp LA(LC(LG(LEFT_ARROW)))  &kp LA(LC(LG(RIGHT_ARROW)))  &kp LS(LG(P))
                                      &trans             &trans           &trans      &trans             &none           &none
            >;
        };

        numbers {
            bindings = <
&none  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none
&none  &trans  &trans  &trans  &trans  &none   &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none
&none  &none   &none   &none   &none   &none   &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
                       &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        signs {
            bindings = <
&none                &less_greater     &less_equal             &greater_equal  &colon_double  &none         &kp MINUS        &kp PLUS                &kp EQUAL     &kp UNDERSCORE        &kp BACKSLASH          &none
&minus_greater_than  &trans            &trans                  &trans          &trans         &pipe_double  &kp EXCLAMATION  &kp AT_SIGN             &kp POUND     &kp DOLLAR            &kp PERCENT            &kp PIPE
&none                &less_than_minus  &exclamatory_and_equal  &equal_arrow    &equals_colon  &none         &kp CARET        &kp AMPERSAND           &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &none
                                                               &trans          &none          &mo 1         &none            &curly_brackets_double  &none
            >;
        };

        layer_5 {
            bindings = <
&none  &none              &none                     &none               &none  &none                     &none  &none  &none  &none  &none  &kp LG(TAB)
&none  &kp LG(LS(LA(A)))  &kp LG(LA(LS(P)))         &kp LG(LA(LS(D)))   &none  &kp LG(LA(LS(G)))         &none  &none  &none  &none  &none  &none
&none  &kp LG(LA(LS(Z)))  &kp LS(LA(LG(NUMBER_2)))  &kp LG(LA(LS(N1)))  &none  &kp LG(LA(LS(NUMBER_3)))  &none  &none  &none  &none  &none  &none
                                                    &none               &none  &none                     &none  &none  &none
            >;
        };

        layer_6 {
            bindings = <
&none  &graveQ  &graveW  &graveE  &graveR  &graveT  &none  &none  &none  &none  &none  &none
&none  &graveA  &graveS  &graveD  &graveF  &graveG  &none  &none  &none  &none  &none  &none
&none  &none    &none    &none    &none    &none    &none  &none  &none  &none  &none  &none
                         &none    &none    &mo 1    &none  &none  &none
            >;
        };

        layer_7 {
            bindings = <
&none  &mQ    &mW    &mE    &mR    &mT    &none  &none  &none  &none  &none  &none
&none  &mA    &mS    &mD    &mF    &mG    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                     &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
